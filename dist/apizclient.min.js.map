{"version":3,"file":"apizclient.min.js","sources":["apizclient.js"],"sourcesContent":["/* global DEBUG */\n// tslint:disable-next-line\nimport { MIMEType, ajax, AjaxOptions } from 'tinyjx';\n// tslint:disable-next-line\nimport { APIzClient, HTTPMethodLowerCase, ClientRequestOptions, APIzClientRequest, HTTPMethodUpperCase } from 'apiz-ng';\n\nexport type APIzClientType = keyof MIMEType;\n\nexport type APIzClientMeta = any;\n\nexport type APIzClientInstance = APIzClient<AjaxOptions, APIzClientType, any, HTTPMethodLowerCase>;\n\nexport { AjaxOptions as APIzRawRequestOptions };\n\nexport interface APIzClientConstructorOptions {\n\tbeforeSend?: (xhr: XMLHttpRequest) => void | boolean,\n\tafterResponse?: (resData: any, status: string, xhr: XMLHttpRequest, url: string, reqData: any) => void,\n\terror?: (errType: string, err: Error, data: any, xhr: XMLHttpRequest) => void,\n\tretry?: number\n}\n\ninterface APIzClientConstructorOptionsWithMethod extends APIzClientConstructorOptions {\n\tmethod: HTTPMethodUpperCase;\n}\n\ntype Callable = (...args: Array<any>) => any;\n\nconst isFn = (f: any): f is Callable => typeof f === 'function';\n\nfunction isPromise<T = any>(p: any): p is Promise<T> {\n\treturn !!(p && typeof p.then === 'function');\n}\n\nasync function pRetry<Result = any>(\n\tthis: any,\n\tfn: (...args: any[]) => any,\n\t{\n\t\tretry,\n\t\tbeforeRetry\n\t}: {\n\t\tretry: number;\n\t\tbeforeRetry?: (retryCount: number, e: Error) => any;\n\t},\n\talreadyTried: number = 1\n): Promise<Result> {\n\tlet rst: Result | Promise<Result> | null = null;\n\tif (retry < 0 || (retry > Number.MAX_SAFE_INTEGER && retry !== Infinity)) {\n\t\tthrow new Error('retry must be between 0 to Number.MAX_SAFE_INTEGER or be Infinity');\n\t}\n\n\ttry {\n\t\trst = fn.call(this);\n\t\tif (isPromise<Result>(rst)) {\n\t\t\trst = await rst;\n\t\t}\n\t} catch (e) {\n\t\tif (beforeRetry) {\n\t\t\tbeforeRetry(alreadyTried, e);\n\t\t}\n\t\tif (retry) {\n\t\t\treturn pRetry<Result>(\n\t\t\t\tfn,\n\t\t\t\t{\n\t\t\t\t\t// tslint:disable-next-line\n\t\t\t\t\tretry: --retry,\n\t\t\t\t\tbeforeRetry\n\t\t\t\t},\n\t\t\t\t// tslint:disable-next-line\n\t\t\t\t++alreadyTried\n\t\t\t);\n\t\t} else {\n\t\t\tthrow e;\n\t\t}\n\t}\n\treturn rst!;\n}\n\n\nfunction createRequest({\n\t\tmethod,\n\t\tbeforeSend,\n\t\tafterResponse,\n\t\terror,\n\t\tretry = 0\n\t}: APIzClientConstructorOptionsWithMethod\n): APIzClientRequest<AjaxOptions, APIzClientType, APIzClientMeta> {\n\treturn function request({\n\t\turl,\n\t\toptions,\n\t\tbody,\n\t\theaders,\n\t\ttype,\n\t\thandleError = true\n\t}: ClientRequestOptions<AjaxOptions, APIzClientType, APIzClientMeta>): Promise<any> {\n\t\tlet $options: AjaxOptions | undefined, count = 0;\n\t\tif (options) {\n\t\t\t$options = {\n\t\t\t\t...options,\n\t\t\t\turl,\n\t\t\t\tmethod\n\t\t\t};\n\t\t} else {\n\t\t\t$options = {\n\t\t\t\turl,\n\t\t\t\tmethod,\n\t\t\t\tprocessData: false,\n\t\t\t\tdata: body,\n\t\t\t\tcontentType: type,\n\t\t\t\theaders\n\t\t\t};\n\t\t}\n\t\treturn pRetry(() => {\n\t\t\t// tslint:disable-next-line\n\t\t\treturn new Promise((rs, rj) => {\n\t\t\t\tajax({\n\t\t\t\t\t...$options,\n\t\t\t\t\tbeforeSend(xhr: XMLHttpRequest): any {\n\t\t\t\t\t\tif (!count && isFn(beforeSend)) {\n\t\t\t\t\t\t\treturn beforeSend(xhr);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsuccess(data: any, xhr: XMLHttpRequest): void {\n\t\t\t\t\t\tisFn(afterResponse) && count === retry && afterResponse(data, 'success', xhr, url, body);\n\t\t\t\t\t\trs({\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\txhr\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\trecoverableError(err: Error, data: any, xhr: XMLHttpRequest): void {\n\t\t\t\t\t\tisFn(afterResponse) && count === retry && afterResponse(data, 'error', xhr, url, body);\n\t\t\t\t\t\tisFn(error) && count === retry && handleError && error('recoverableError', err, data, xhr);\n\t\t\t\t\t\trj({\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tunrecoverableError(err: Error, xhr: XMLHttpRequest): void {\n\t\t\t\t\t\tisFn(error) && count === retry && handleError && error('unrecoverableError', err, undefined, xhr);\n\t\t\t\t\t\trj({\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\tdata: undefined\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}, {\n\t\t\tretry,\n\t\t\tbeforeRetry(): void {\n\t\t\t\t++count;\n\t\t\t}\n\t\t});\n\t};\n}\n\n\n/**\n * { beforeSend, afterResponse, retry }\n */\nexport default function (opts: APIzClientConstructorOptions = {}): APIzClientInstance {\n\treturn (['get', 'head', 'post', 'put', 'patch', 'delete', 'options'] as Array<HTTPMethodLowerCase>)\n\t\t.reduce(\n\t\t\t(prev: APIzClientInstance, cur: HTTPMethodLowerCase) => (prev[cur] = createRequest({\n\t\t\t\t...opts,\n\t\t\t\tmethod: cur.toUpperCase() as HTTPMethodUpperCase\n\t\t\t}), prev),\n\t\t\t{} as APIzClientInstance\n\t\t);\n}\n"],"names":["isPromise","p","then","pRetry","fn","retry","beforeRetry","alreadyTried","rst","Number","MAX_SAFE_INTEGER","Error","call","e","createRequest","method","beforeSend","afterResponse","error","url","options","body","headers","type","handleError","$options","count","processData","data","contentType","Promise","rs","rj","ajax","xhr","isFn","success","recoverableError","err","unrecoverableError","f","opts","reduce","prev","cur","toUpperCase"],"mappings":"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"}